extrfn <- function (ch) {
Xraster <- raster(as.mask(traps(ch)), values = attr(ch, 'p0'))
c(n          = nrow(ch),
detections = sum(ch),
mean.p0    = mean(attr(ch, 'p0')),
sd.p0      = sd(attr(ch, 'p0')),
MoranI     = raster::Moran(Xraster))
}
grid400 <- make.grid(20, 20, spacex = 1, detector = 'proximity')
# Chunk 1: setup
library(secrdesign)
nc <- 18
setNumThreads(nc)
options(digits = 5)   # for more readable output
options(width=100)
addRB <- function (x, est, xoffset = 0, star = 100, ...) {
x <- x+xoffset
OK <- est$RB <= star
points(x[!OK], rep(star,sum(!OK)), pch=8)
segments(x[OK], (est$RB-2*est$seRB)[OK], x[OK], (est$RB+2*est$seRB)[OK])
points(x[OK], est$RB[OK], ...)
}
# Chunk 2: simVAC code
# function to return simulated capthist object given
# variable, autocorrelated detector efficiency VAC
simVAC.capthist <- function (traps, popn, detectfn, detectpar, noccasions = 1,
betaX = -0.5, phi = 1, usermvn = FALSE, makeuniform = FALSE,
cov.structure = c("exponential", "sq_exponential", "none"), ...)
{
rmvn <- function(n, mu = 0, V = matrix(1), seed = NULL) {
# based on Moqanaki 2021 code
p <- length(mu)
D <- V   # no Cholesky decomposition D <- chol(V)
t(matrix(rnorm(n * p, mean = 0, sd = 1), ncol = p) %*% D + rep(mu, rep(n, p)))
}
if (!(detectfn == 0 || detectfn == "HN")) stop ("detectfn not implemented")
cov.structure <- match.arg(cov.structure)
K <- nrow(traps)
N <- nrow(popn)
trap.dists <- secr::edist(traps,traps)     # between traps
if (cov.structure == "none") {
p0 <- rep(detectpar$g0, K)
X <- NA
}
else {
if (cov.structure == "exponential")
cov <- exp(-phi * trap.dists)
else if (cov.structure == "sq_exponential")
cov <- exp(-phi^2 * trap.dists^2)
if (usermvn)
X <- rmvn(1, mu = rep(0, K), V = cov)   # as in Moqanaki et al.
else
X <- mvtnorm::rmvnorm(1, mean = rep(0, K), sigma = cov)
X <- as.numeric(X)
if (makeuniform) {
# this code transforms the MVN values so they are uniformly distributed on [-1.96,1.96]
# as used by Moqanaki et al. 2021 but not Dey et al. 2023
df <- data.frame(row = 1:K, orig.value = X)
df <- df[order(df$orig.value),]
df$value <- seq(-1.96, 1.96, length.out = K)
df <- df[order(df$row), ]
X <- df$value
}
# Moqanaki et al. (2021) Eq 8,9
# Dey et al. (2023) implicitly set betaX = 1.0
beta0 <- logit(detectpar$g0)            # intercept when no variation = logit(eta)
p0 <- invlogit(beta0 + betaX * X)       # length K vector
}
# compute detection probability
ac.dists   <- secr::edist(popn, traps)     # activity centres to traps
p <- exp(-ac.dists^2/(2*detectpar$sigma^2))
p <- sweep(p, 2, p0, "*")
if (noccasions>1) {
p <- aperm(apply(p,1:2,rep,noccasions), c(2,1,3))
}
# simulate detections
if (detector(traps)[1] == 'proximity') {
ch <- rbinom(N*K*noccasions, 1, p)
}
else if (detector(traps)[1] == 'count') {
ch <- rpois(N*K*noccasions, -log(1-p))
}
else stop ("detector not proximity or count")
ch <- array(ch, dim=c(N,noccasions,K))
rownames(ch) <- 1:N
ch <- ch[apply(ch, 1, function(x) sum(x) > 0),,, drop = FALSE]
class(ch) <- 'capthist'
traps(ch) <- traps
attr(ch, 'X') <- X
attr(ch, 'p0') <- p0
ch
}
# Chunk 3: VAC scenarios
grid400 <- make.grid(20, 20, spacex = 1, detector = 'proximity')
mask400 <- make.mask(grid400, buffer = 4.5)
poparg <- list(Ndist = 'fixed')
detarg <- expand.arg(phi           = c(0.001, 1, 1000),
betaX         = seq(0, 2.5, 0.5),
cov.structure = "sq_exponential",
makeuniform   = TRUE)
fitarg <- list(details = list(distribution = 'binomial'))
scen <- make.scenarios(noccasions = 1,
D          = 250/maskarea(mask400),
g0         = 0.15,
sigma      = 1.5,
detectfn   = 'HN',
detindex   = 1:length(detarg))
}
extrfn <- function (ch) {
Xraster <- raster(as.mask(traps(ch)), values = attr(ch, 'p0'))
c(n          = nrow(ch),
detections = sum(ch),
mean.p0    = mean(attr(ch, 'p0')),
sd.p0      = sd(attr(ch, 'p0')),
MoranI     = raster::Moran(Xraster))
}
VACtest <- run.scenarios(100, scen, grid400, maskset=list(mask400), CH.function =
"simVAC.capthist", pop.args = poparg, det.args = detarg, fit = FALSE, extractfn = extrfn)
VACtest <- run.scenarios(10, scen, grid400, maskset=list(mask400), CH.function =
"simVAC.capthist", pop.args = poparg, det.args = detarg, fit = FALSE, extractfn = extrfn)
temp <- t(sapply(summary(VACtest)$OUTPUT, '[', , 'mean'))
dimnames(temp) <- list(NULL,  c('n', 'n+r', 'mean.p0', 'sd.p0', 'MoranI'))
parm <- do.call(rbind, lapply(detarg, as.data.frame))   # now flat
cbind(parm, round(temp,3))
parm
