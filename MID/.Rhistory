Scenario = 1:nscen))
arr <- arr[,num,,, ,drop = FALSE]   # drop link field
arr <- aperm(arr, c(1,2,3,5,4))
arr
}
else stop("unsuitable data; expecting estimatetables from secrdesign")
}
estimateArray(MIDsims4)
estimateArray(MIDsims4)
ntab
object$output[[1]][[1]]
# Convert output (nested list of estimate tables) to array
# with dimensions (Parameter, statistic, Group, Scenario, Replicate)
estimateArray <- function (object) {
browser()
nscen <- length(object$output)
nrepl <- length(object$output[[1]])
groups <- unique(object$scenarios$group)
ngrp  <- max(1, length(groups))
typical <- object$output[[1]][[1]]
if (inherits(typical, "secrlist")) stop("estimateArray expects estimate table(s), not secrlist")
if(length(dim(typical))!=2) {
groupnames <- if (length(typical) == ngrp) groups else names(typical)
ngrp <- length(groupnames)
typical <- typical[[1]]
}
else {
ngrp <- 1
groupnames <- 1
fillnull <- function (x) {
lapply(x, function(y) if (nrow(y)==0) array(NA, dim = dim(typical)) else y)
}
object$output <- lapply(object$output, fillnull)
npar <- unique(unlist(lapply(object$output, sapply, nrow)))
if (length(npar)>1) stop("number of parameters varies among scenarios or replicates")
}
typical <- data.frame(typical)  # convert matrix output from modelAverage
# count actual tables per replicate of each scenario
ntab <- sapply(object$output,
function(x) {
if (length(dim(x[[1]]))==2) 1 else length(x[[1]])
})
if (length(table(ntab)) > 1)
stop("varying number of estimatetables per scenario")
if (ntab[1] > ngrp)
warning("multiple tables per group")
num <- sapply(typical, is.numeric)  # copes with matrix
if (inherits(object, 'estimatetables')) {
values <- unlist(object$output)
values <- suppressWarnings(as.numeric(values))  # link text -> NA
arr <- array(values,
dim = c(dim(typical), ngrp, nrepl, nscen),
dimnames = list(
Parameter = rownames(typical),
names(typical),
Group = groupnames,
Replicate = 1:nrepl,
Scenario = 1:nscen))
arr <- arr[,num,,, ,drop = FALSE]   # drop link field
arr <- aperm(arr, c(1,2,3,5,4))
arr
}
else stop("unsuitable data; expecting estimatetables from secrdesign")
}
estimateArray(MIDsims4)
estimateSummary(MIDsims4)
source("D:/Density secr 4.6/secrdesign/R/estimateSummary.R")
estimateSummary(MIDsims4)
source("D:/Density secr 4.6/secrdesign/R/estimateSummary.R")
MIDsims4 <- readRDS(file = 'MIDsims4.RDS')
scenarios <- expand.grid(PI = c(0.00, 10^(seq(-5,-2,0.5))), D = 12.5 * c(0.25,0.5,1,2,4))
cbind(scenarios, getcounts(MIDsims4)[,-5])
countlegend(-5)
estD <- estimateSummary(MIDsims4)
source("D:/Density secr 4.6/secrdesign/R/estimateSummary.R")
source("D:/Density secr 4.6/secrdesign/R/estimateSummary.R")
estD <- estimateSummary(MIDsims4)
estD
estL <- estimateSummary(MIDsims4, 'lambda0')
estS <- estimateSummary(MIDsims4, 'sigma')
cat('Density\n')
cbind(scenarios, round(estD,4))
cat('lambda0\n')
cbind(scenarios, round(estL,4))
cat('sigma\n')
cbind(scenarios, round(estS,4))
library(RColorBrewer)
cols <- brewer.pal(n = 5, name = "YlOrBr")
par(mar = c(4,4,1,1), mgp = c(2.4,0.7,0), bty = 'o', bg = 'white', pty = 's')
x <- scenarios$PI[1:8]
plot(1,1,type='n', xlim=c(1e-5, 1e-2), log='x', ylim=c(-1,0.5),
xlab = 'Probability of identity PI (log scale)', ylab='RB', axes = F)
axis(1, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'))
axis(2)
shade(0.1)
abline(h = 0, lty = 2)
for (d in 1:5) {
addRB(x, estD[(d-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.3, bg = cols[d])
}
for (d in 1:5) {
addRB(x, estD[(d-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols[d])
}
legend(0.000015, -0.55, legend = as.character(12.5 * c(0.25,0.5,1,2,4)),
text.width = 0.38, title = expression(paste('Density ', sigma^{-2})),
pch = 21, pt.bg = cols, cex=0.85, pt.cex = 1.4)
estD
d
addRB(x, estD[(d-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols[d])
# add points to plot
addRB <- function (x, est, mean = 'RB', se = 'seRB', xoffset = 0, star = 100, ...) {
browser()
x <- x+xoffset
OK <- est[,mean] <= star
points(x[!OK], rep(star,sum(!OK)), pch=8)
mn <-  est[OK,mean]
se <-  est[OK,se]
segments(x[OK],mn-2*se, x[OK], mn+2*se)
points(x[OK], mn, ...)
}
addRB(x, estD[(d-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols[d])
OK
star
est[,mean]
x[!OK]
# add points to plot
addRB <- function (x, est, mean = 'RB', se = 'seRB', xoffset = 0, star = 100, ...) {
browser()
x <- x+xoffset
OK <- est[,mean] <= star
OK[is.na(OK) <- FALSE]
points(x[!OK], rep(star,sum(!OK)), pch=8)
mn <-  est[OK,mean]
se <-  est[OK,se]
segments(x[OK],mn-2*se, x[OK], mn+2*se)
points(x[OK], mn, ...)
}
addRB(x, estD[(d-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols[d])
addRB(x, estD[(d-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols[d])
OK
# add points to plot
addRB <- function (x, est, mean = 'RB', se = 'seRB', xoffset = 0, star = 100, ...) {
browser()
x <- x+xoffset
OK <- est[,mean] <= star
OK[is.na(OK)] <- FALSE
points(x[!OK], rep(star,sum(!OK)), pch=8)
mn <-  est[OK,mean]
se <-  est[OK,se]
segments(x[OK],mn-2*se, x[OK], mn+2*se)
points(x[OK], mn, ...)
}
addRB(x, estD[(d-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols[d])
library(RColorBrewer)
cols <- brewer.pal(n = 5, name = "YlOrBr")
par(mar = c(4,4,1,1), mgp = c(2.4,0.7,0), bty = 'o', bg = 'white', pty = 's')
x <- scenarios$PI[1:8]
plot(1,1,type='n', xlim=c(1e-5, 1e-2), log='x', ylim=c(-1,0.5),
xlab = 'Probability of identity PI (log scale)', ylab='RB', axes = F)
axis(1, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'))
axis(2)
shade(0.1)
abline(h = 0, lty = 2)
for (d in 1:5) {
addRB(x, estD[(d-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols[d])
}
legend(0.000015, -0.55, legend = as.character(12.5 * c(0.25,0.5,1,2,4)),
text.width = 0.38, title = expression(paste('Density ', sigma^{-2})),
pch = 21, pt.bg = cols, cex=0.85, pt.cex = 1.4)
,
# add points to plot
addRB <- function (x, est, mean = 'RB', se = 'seRB', xoffset = 0, star = 100, ...) {
x <- x+xoffset
OK <- est[,mean] <= star
OK[is.na(OK)] <- FALSE
points(x[!OK], rep(star,sum(!OK)), pch=8)
mn <-  est[OK,mean]
se <-  est[OK,se]
segments(x[OK],mn-2*se, x[OK], mn+2*se)
points(x[OK], mn, ...)
}
library(RColorBrewer)
cols <- brewer.pal(n = 5, name = "YlOrBr")
par(mar = c(4,4,1,1), mgp = c(2.4,0.7,0), bty = 'o', bg = 'white', pty = 's')
x <- scenarios$PI[1:8]
plot(1,1,type='n', xlim=c(1e-5, 1e-2), log='x', ylim=c(-1,0.5),
xlab = 'Probability of identity PI (log scale)', ylab='RB', axes = F)
axis(1, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'))
axis(2)
shade(0.1)
abline(h = 0, lty = 2)
for (d in 1:5) {
addRB(x, estD[(d-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols[d])
}
legend(0.000015, -0.55, legend = as.character(12.5 * c(0.25,0.5,1,2,4)),
text.width = 0.38, title = expression(paste('Density ', sigma^{-2})),
pch = 21, pt.bg = cols, cex=0.85, pt.cex = 1.4)
cbind(scenarios, getcounts(MIDsims4)[,-5])
cbind(scenarios, getcounts(MIDsims4)[,-5])
# recent secrdesign automatically saves summary capture statistics when fit = TRUE
# this function retrieves a summary for each scenario
getcounts <- function (sims, fn = mean) {
test <- attr(sims$output[[1]][[1]], 'counts')
if (is.null(test))
stop ("counts were not saved with these simulations - only available for secrdesign>=2.9.1")
summarycounts <- function(x) {
countmatrix <- sapply(x, attr, 'counts')
if (dim(countmatrix)==2)
apply(countmatrix,1,fn)
else
rep(NA,length(test))
}
t(sapply(sims$output, summarycounts))
}
cbind(scenarios, getcounts(MIDsims4)[,-5])
# recent secrdesign automatically saves summary capture statistics when fit = TRUE
# this function retrieves a summary for each scenario
getcounts <- function (sims, fn = mean) {
test <- attr(sims$output[[1]][[1]], 'counts')
if (is.null(test))
stop ("counts were not saved with these simulations - only available for secrdesign>=2.9.1")
summarycounts <- function(x) {
countmatrix <- sapply(x, attr, 'counts')
if (is.matrix(countmatrix))
apply(countmatrix,1,fn)
else
rep(NA,length(test))
}
t(sapply(sims$output, summarycounts))
}
cbind(scenarios, getcounts(MIDsims4)[,-5])
sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y
)
n <- getcounts(MIDsims4)[,'n']
n
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
n
plot(n, threshold)
threshold <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y
plot(n, threshold)
threshold <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(n, threshold)
plot(n, threshold, log='y', xlab = 'Expected number detected n', ylab = 'PI threshold for RB = 10%')
threshold <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(n, threshold, log='y', xlim=c(0,500), ylim=c(1e-5,1e-3),
xlab = 'Expected number detected n', ylab = 'PI threshold (RB = 10%)')
plot(n, threshold, log='y', xlim=c(0,500), ylim=c(5e-5,5e-3),
xlab = 'Expected number detected n', ylab = 'PI threshold (RB = 10%)')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(5e-5,5e-3), xlab = 'Expected number detected n', ylab = 'PI threshold (RB = 10%)')
points(n, threshold05)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
points(n, threshold10)
points(n, threshold05, pch=21, type = 'o', bg = cols)
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(5e-5,5e-3), xlab = 'Expected number detected n', ylab = 'PI threshold (RB = 10%)')
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.4)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.4)
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(2e-5,5e-3), xlab = 'Expected number detected n', ylab = 'PI threshold (RB = 10%)')
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.4)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.4)
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(2e-5,5e-3), xlab = 'Expected number detected n', ylab = 'PI threshold (RB = 10%)')
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'))
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(2e-5,5e-3), xlab = 'Expected number detected n', ylab = 'PI threshold (RB = 10%)', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2), xlab = 'Expected number detected n', ylab = 'PI threshold (RB = 10%)', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
axis(1)
box()
mtext(side=2, line = 3, 'PI threshold (RB = 10%)')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = 'Expected number detected n', ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 3, 'PI threshold (RB = 10%)')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
mtext(side=2, line = 4, 'PI threshold (RB = 10%)')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = 'Expected number detected n', ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold (RB = 10%)')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(400, 3e-4, 'RB -10%')
text(400, 3e-4, 'RB --10%')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = 'Expected number detected n', ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(400, 3e-4, 'RB --5%')
text(400, 3e-5, 'RB --10%')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = 'Expected number detected n', ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(380, 2.8e-4, 'RB --5%')
text(380, 3e-5, 'RB --10%')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = 'Expected number detected n', ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(380, 2.7e-4, 'RB -5%')
text(380, 3e-5, 'RB -10%')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = 'Expected number detected n', ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(380, 2.6e-4, 'RB -5%')
text(380, 3e-5, 'RB -10%')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = 'Expected number detected n', ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(380, 2e-4, 'RB -5%')
text(380, 3e-5, 'RB -10%')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = 'Expected number detected n', ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(380, 2.2e-4, 'RB -5%')
text(380, 3e-5, 'RB -10%')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = 'Expected number detected n', ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(380, 2.2e-4, 'RB -10%')
text(380, 3e-5, 'RB -5%')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = expression(paste('Expected number detected ', italic(n))), ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(380, 2.2e-4, 'RB -10%')
text(380, 3e-5, 'RB -5%')
threshold05 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.05)$y)
threshold10 <- sapply(1:5, function(d) approx(estD[(d-1)*8 + 1:8,'RB'], x, xout=-0.1)$y)
n <- getcounts(MIDsims4)[seq(1,40,8),'n']
plot(1,1,type='n', log='y', xlim=c(0,500), ylim=c(1e-5,1e-2),
xlab = expression(paste('Expected number detected ', ~italic(n))), ylab = '', axes = FALSE)
axis(2, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'), las = 1)
axis(1)
mtext(side=2, line = 4, 'PI threshold')
box()
points(n, threshold05, pch=21, type = 'o', bg = cols, cex = 1.5)
points(n, threshold10, pch=21, type = 'o', bg = cols, cex = 1.5)
text(380, 2.2e-4, 'RB -10%')
text(380, 3e-5, 'RB -5%')
library(RColorBrewer)
cols <- brewer.pal(n = 5, name = "YlOrBr")
par(mfrow=c(1,1), mar=c(4,4,1,1), mgp=c(2.4,0.7,0), bty = 'o', bg = 'white', pty='s', fig = c(0,1,0,1))
x <- scenarios$PI
# when does RB exceed 10%?
approx(estD$RB, x, xout=-0.1)$y
# [1] 0.00037487
leg <- c('D','lambda0','sigma')
plot(1,1,type='n', xlim=c(1e-5, 1e-2), log='x', ylim=c(-1,1), xlab = 'Probability of identity PI (log scale)', ylab='RB', axes = F)
axis(1, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'))
axis(2)
shade(0.1)
abline(h=0, lty=2)
addRB(x, estL, type='o', pch=21, bg = 'white')
addRB(x, estS, type='o', pch=24, bg = 'white', star = 1.0)
addRB(x, estD, type='o', pch=21, bg = cols[3])
legend(0.000015, -0.6, legend = leg, pch=c(21,21,24), cex = 0.85, col=c(cols[3],'white','white'))
par(fig = c(0.09,0.4, 0.6, 0.98), mgp=c(0.5,0.5,0), new = T)
plot(1,1,type='n', xlim=c(0, 1e-2),  ylim=c(-1,1), xlab = 'PI', ylab='RB', axes = F)
shade()
abline(h=0, lty=2)
addRB(x, estL, type='o', pch=21, bg = 'white')
addRB(x, estS, type='o', pch=24, bg = 'white')
addRB(x, estD, type='o', pch=16)
axis(1, at = 10^seq(-5,-2,0.5), label = FALSE)
MIDsims5 <- readRDS(file = 'MIDsims5.RDS')
header(MIDsims5)
library(secrdesign)
header(MIDsims5)
scenarios <- expand.grid(PI = c(0.00, 10^(seq(-5,-2,0.5))), lambda0 = c(0.05,0.1,0.2))
scenarios
cbind(scenarios, getcounts(MIDsims5)[,-5])
countlegend(-5)
estD <- estimateSummary(MIDsims5)
cat('Density\n')
cbind(scenarios, round(estD,4))
par(mar = c(4,4,1,1), mgp = c(2.4,0.7,0), bty = 'o', bg = 'white', pty = 's')
x <- scenarios$PI[1:8]
plot(1,1,type='n', xlim=c(1e-5, 1e-2), log='x', ylim=c(-1,0.5),
xlab = 'Probability of identity PI (log scale)', ylab='RB', axes = F)
axis(1, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'))
axis(2)
par(mar = c(4,4,1,1), mgp = c(2.4,0.7,0), bty = 'o', bg = 'white', pty = 's', fig = c(0,1,0,1))
x <- scenarios$PI[1:8]
plot(1,1,type='n', xlim=c(1e-5, 1e-2), log='x', ylim=c(-1,0.5),
xlab = 'Probability of identity PI (log scale)', ylab='RB', axes = F)
axis(1, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'))
axis(2)
shade(0.1)
abline(h = 0, lty = 2)
for (l in 1:3) {
addRB(x, estD[(l-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols[l])
}
legend(0.000015, -0.55, legend = as.character(c(0.05,0.1,0.2)),
text.width = 0.38, title = 'lambda0',
pch = 21, pt.bg = cols2[1:3], cex=0.85, pt.cex = 1.4)
?RColorBrewer
display.brewer.all()
cols2 <- brewer.pal(n = 5, name = "Blues")
legend(0.000015, -0.55, legend = as.character(c(0.05,0.1,0.2)),
text.width = 0.38, title = 'lambda0',
pch = 21, pt.bg = cols2[2:4], cex=0.85, pt.cex = 1.4)
par(mar = c(4,4,1,1), mgp = c(2.4,0.7,0), bty = 'o', bg = 'white', pty = 's', fig = c(0,1,0,1))
x <- scenarios$PI[1:8]
plot(1,1,type='n', xlim=c(1e-5, 1e-2), log='x', ylim=c(-1,0.5),
xlab = 'Probability of identity PI (log scale)', ylab='RB', axes = F)
axis(1, at = 10^seq(-5,-2,0.5), label = c('0.00001','','0.0001','','0.001','','0.01'))
axis(2)
shade(0.1)
abline(h = 0, lty = 2)
for (l in 1:3) {
addRB(x, estD[(l-1)*8 + 1:8,], type = 'o', pch = 21, cex = 1.4, bg = cols2[l+1])
}
legend(0.000015, -0.55, legend = as.character(c(0.05,0.1,0.2)),
text.width = 0.38, title = 'lambda0',
pch = 21, pt.bg = cols2[2:4], cex=0.85, pt.cex = 1.4)
cbind(scenarios, getcounts(MIDsims5)[,-5])
