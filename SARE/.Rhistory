df <- data.frame(row = 1:K, orig.value = X)
df <- df[order(df$orig.value),]
df$value <- seq(-1.96, 1.96, length.out = K)
df <- df[order(df$row), ]
X <- df$value
}
# Moqanaki et al. (2021) Eq 8,9
# Dey et al. (2023) implicitly set betaX = 1.0
beta0 <- logit(detectpar$g0)            # intercept when no variation = logit(eta)
p0 <- invlogit(beta0 + betaX * X)       # length K vector
}
# compute detection probability
ac.dists   <- secr::edist(popn, traps)     # activity centres to traps
p <- exp(-ac.dists^2/(2*detectpar$sigma^2))
p <- sweep(p, 2, p0, "*")
if (noccasions>1) {
p <- aperm(apply(p,1:2,rep,noccasions), c(2,1,3))
}
# simulate detections
if (detector(traps)[1] == 'proximity') {
ch <- rbinom(N*K*noccasions, 1, p)
}
else if (detector(traps)[1] == 'count') {
ch <- rpois(N*K*noccasions, -log(1-p))
}
else stop ("detector not proximity or count")
ch <- array(ch, dim=c(N,noccasions,K))
rownames(ch) <- 1:N
ch <- ch[apply(ch, 1, function(x) sum(x) > 0),,, drop = FALSE]
class(ch) <- 'capthist'
traps(ch) <- traps
attr(ch, 'X') <- X
attr(ch, 'p0') <- p0
ch
}
source('../setup.R')
grid400 <- make.grid(20, 20, spacex = 1, detector = 'proximity')
mask400 <- make.mask(grid400, buffer = 4.5)
poparg <- list(Ndist = 'fixed')
detarg <- expand.arg(phi           = c(0.001, 1, 1000),
betaX         = seq(0, 2.5, 0.5),
cov.structure = "sq_exponential",
makeuniform   = TRUE)
fitarg <- list(details = list(distribution = 'binomial'))
MOQtest <- run.scenarios(100, scen, grid400,CH.function = "simMOQDEY.capthist",
pop.args = poparg, det.args = detarg, fit = FALSE, extractfn = MoranX, varname = 'p0')
# function to return simulated capthist object
simMOQDEY.capthist <- function (traps, popn, detectfn, detectpar, noccasions = 1,
betaX = -0.5, phi = 1, usermvn = FALSE, makeuniform = FALSE,
cov.structure = c("exponential", "sq_exponential", "none"), ...)
{
rmvn <- function(n, mu = 0, V = matrix(1), seed = NULL) {
# based on Moqanaki 2021 code
p <- length(mu)
D <- V   # no Cholesky decomposition D <- chol(V)
t(matrix(rnorm(n * p, mean = 0, sd = 1), ncol = p) %*% D + rep(mu, rep(n, p)))
}
if (!(detectfn == 0 || detectfn == "HN")) stop ("detectfn not implemented")
cov.structure <- match.arg(cov.structure)
K <- nrow(traps)
N <- nrow(popn)
trap.dists <- secr::edist(traps,traps)     # between traps
if (cov.structure == "none") {
p0 <- rep(detectpar$g0, K)
X <- NA
}
else {
if (cov.structure == "exponential")
cov <- exp(-phi * trap.dists)
else if (cov.structure == "sq_exponential")
cov <- exp(-phi^2 * trap.dists^2)
if (usermvn)
X <- rmvn(1, mu = rep(0, K), V = cov)   # as in Moqanaki et al.
else
X <- mvtnorm::rmvnorm(1, mean = rep(0, K), sigma = cov)
X <- as.numeric(X)
if (makeuniform) {
# this code transforms the MVN values so they are uniformly
# distributed on [-1.96,1.96], as used by Moqanaki et al. 2021
# but not by Dey et al. 2023
df <- data.frame(row = 1:K, orig.value = X)
df <- df[order(df$orig.value),]
df$value <- seq(-1.96, 1.96, length.out = K)
df <- df[order(df$row), ]
X <- df$value
}
# Moqanaki et al. (2021) Eq 8,9
# Dey et al. (2023) implicitly set betaX = 1.0
beta0 <- logit(detectpar$g0)            # intercept when no variation = logit(eta)
p0 <- invlogit(beta0 + betaX * X)       # length K vector
}
# compute detection probability
ac.dists   <- secr::edist(popn, traps)     # activity centres to traps
p <- exp(-ac.dists^2/(2*detectpar$sigma^2))
p <- sweep(p, 2, p0, "*")
if (noccasions>1) {
p <- aperm(apply(p,1:2,rep,noccasions), c(2,1,3))
}
# simulate detections
if (detector(traps)[1] == 'proximity') {
ch <- rbinom(N*K*noccasions, 1, p)
}
else if (detector(traps)[1] == 'count') {
ch <- rpois(N*K*noccasions, -log(1-p))
}
else stop ("detector not proximity or count")
ch <- array(ch, dim=c(N,noccasions,K))
rownames(ch) <- 1:N
ch <- ch[apply(ch, 1, function(x) sum(x) > 0),,, drop = FALSE]
class(ch) <- 'capthist'
traps(ch) <- traps
attr(ch, 'X') <- X
attr(ch, 'p0') <- p0
ch
}
source('../setup.R')
grid400 <- make.grid(20, 20, spacex = 1, detector = 'proximity')
mask400 <- make.mask(grid400, buffer = 4.5)
poparg <- list(Ndist = 'fixed')
detarg <- expand.arg(phi           = c(0.001, 1, 1000),
betaX         = seq(0, 2.5, 0.5),
cov.structure = "sq_exponential",
makeuniform   = TRUE)
fitarg <- list(details = list(distribution = 'binomial'))
scen <- make.scenarios(noccasions = 1,
D          = 250/maskarea(mask400),
g0         = 0.15,
sigma      = 1.5,
detectfn   = 'HN',
detindex   = 1:length(detarg))
MOQtest <- run.scenarios(100, scen, grid400,CH.function = "simMOQDEY.capthist",
pop.args = poparg, det.args = detarg, fit = FALSE, extractfn = MoranX, varname = 'p0')
temp <- MoranXSummary(MOQtest)
temp
parm <- attr(detarg, 'comb')
cbind(parm, round(temp,3))
summary(MOQtest)
temp <- MoranXSummary(MOQtest, 'MoranI')
parm <- attr(detarg, 'comb')
cbind(parm, round(temp,3))
temprpsv <- MoranXSummary(MOQtest, 'rpsv')
tempdnpa <- MoranXSummary(MOQtest, 'dnpa')
temprpsv
tempdnpa
source('../setup.R')
grid1024 <- make.grid(32, 32, spacex = 1, detector = 'proximity')
mask1024 <- make.mask(grid1024, buffer = 5)
poparg <- list(Ndist = 'fixed')
detarg <- expand.arg(phi = c(1,0.05), betaX = 1, cov.structure = "exponential")
fitarg <- list(details = list(distribution = 'binomial'))
scen <- make.scenarios(noccasions = 1,
D          = 300/maskarea(mask1024),
g0         = c(0.1,0.3,0.6),
sigma      = 1.5,
detectfn   = 'HN',
detindex   = 1:length(detarg))
scen <- scen[order(scen$g0, scen$detindex),]
scen$scenario <- 1:6
DEYtest <- run.scenarios(
nrepl       = 100,
scenarios   = scen,
trapset     = grid1024,
maskset     = mask1024,
CH.function = "simMOQDEY.capthist",
fit         = FALSE,
pop.args    = poparg,
det.args    = detarg,
extractfn   = MoranX)
X <- sample.int(2,15,replace=TRUE)
tempMoranI <- MoranXSummary(DEYtest)
cbind(scen[,c('g0', 'detindex')], round(tempMoranI,3))
tempMoranI <- MoranXSummary(DEYtest, 'MoranI')
tempMoranI
cbind(scen[,c('g0', 'detindex')], round(tempMoranI,3))
tempdnpa <- MoranXSummary(DEYtest, 'dnpa')
temprpsv <- MoranXSummary(DEYtest, 'rpsv')
tempdnpa
temprpsv
temprpsv <- MoranXSummary(DEYtest, 'rpsv')
temprpsv
library(secr)
grid <- make.grid(5,5, spacing = 1)
X <- mvtnorm::rmvtnorm(25, exp(-dist(grid)))
covariates(grid) <- data.frame(X=X)
X <- mvtnorm::rmvnorm(25, exp(-dist(grid)))
?mvtnorm::rmvnorm
X <- mvtnorm::rmvnorm(25, exp(-as.matrix(dist(grid))))
grid <- make.grid(5,5, spacing = 1)
dist(grid)
X <- mvtnorm::rmvnorm(25, exp(-edist(grid,grid)))
X <- mvtnorm::rmvnorm(25, mean=rep(0,25), exp(-edist(grid,grid)))
covariates(grid) <- data.frame(X=X)
plot(as.mask(grid), cov = 'X', col = 1:3)
covariates(grid)
X <- mvtnorm::rmvnorm(25, mean=rep(0,25), exp(-dist(grid)))
dist(grid)
X <- mvtnorm::rmvnorm(25, mean=rep(0,25), exp(-as.matrix(dist(grid))))
X
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=X)
plot(as.mask(grid), cov = 'X', col = 1:3)
plot(grid, gridlines = FALSE, detpar=list(pch=16, col=X))
X
covariates(grid) <- data.frame(X=as.numeric(X))
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(X))
plot(as.mask(grid), cov = 'X', col = 1:3)
plot(grid, gridlines = FALSE, detpar=list(pch=16, col=X))
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), col = 1:3)
X
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
covariates(grid)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), col = 1:3)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), col = 1:3, border=1, cex=2)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), border=1, cex=2)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), border=1, cex=3)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), border=1, cex=4, legend = FALSE)
par(mar=c(1,1,1,1))
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), border=1, cex=4, legend = FALSE)
par(mar=c(1,1,1,1))
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), border=2, cex=4, legend = FALSE)
set.seed(123)
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), border=2, cex=4, legend = FALSE)
plot(as.mask(grid), cov = 'X', border=2, legend = FALSE)
plot(grid, border=2, legend = FALSE)
plot(grid, border=2, legend = FALSE, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4, legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4, add = TRUE)
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4, legend = FALSE, add = TRUE)
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4, legend = FALSE, add = TRUE)
set.seed(1234)
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4, legend = FALSE, add = TRUE)
set.seed(12345)
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4, legend = FALSE, add = TRUE)
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-0.5*as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4, legend = FALSE, add = TRUE)
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-0.5*as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4, legend = FALSE, add = TRUE)
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-0.5*as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4, legend = FALSE, add = TRUE)
library(RColorBrewer)
display.brewer.all()
YlOrRed
YlOrRd
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4,
col = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4,
col = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4,
col = brewer.pal(n = 5, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4,
col = brewer.pal(n = 8, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4,
col = brewer.pal(n = 3, name = "YlOrRd"),
legend = FALSE, add = TRUE)
set.seed(1234)
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-0.5*as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4,
col = brewer.pal(n = 3, name = "YlOrRd"),
legend = FALSE, add = TRUE)
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-0.5*as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4,
col = brewer.pal(n = 3, name = "YlOrRd"),
legend = FALSE, add = TRUE)
set.seed(12345)
X <- mvtnorm::rmvnorm(1, mean=rep(0,25), exp(-0.5*as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,10), cex=4,
col = brewer.pal(n = 3, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
col = brewer.pal(n = 3, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
col = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 21, bg = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 21, bg = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 21, bg = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 21, fg = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 21, bg = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 21, col = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 16, col = brewer.pal(n = 4, name = "YlOrRd"),
legend = FALSE, add = TRUE)
?plot.mask
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 16, col = brewer.pal(n = 4, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 21, bg = brewer.pal(n = 4, name = "YlOrBr"),
legend = FALSE, add = TRUE)
grid <- make.grid(6,6, spacing = 1)
set.seed(12345)
X <- mvtnorm::rmvnorm(1, mean=rep(0,nrow(grid)), exp(-0.5*as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 16, col = brewer.pal(n = 4, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
grid <- make.grid(6,6, spacing = 1)
set.seed(12345)
X <- mvtnorm::rmvnorm(1, mean=rep(0,nrow(grid)), exp(-0.5*as.matrix(dist(grid))))
covariates(grid) <- data.frame(X=as.numeric(exp(X)))
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
covariates(grid)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,10,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,3,5,15,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,4,7,15,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
locator(3)
pop <- data.frame(x= c(1.52, 4.50, 0.51), y = c(4.46, 2.5, 1.5))
points(pop)
trps <- apply(pop,1, function(x) distancetotrap(x, grid))
trps <- edist(pop, grid)
trps
trps <- edist(pop, grid)
d <- 2
for (i in 1:3) {
OK <- trps[i,]<d
segments (pop[i,1], grid$x[OK], pop[i,2], grid$y[OK])
}
pop
pop[i,1]
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,4,7,15,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
pop <- data.frame(x= c(1.52, 4.50, 0.51), y = c(4.46, 2.5, 1.5))
points(pop)
trps <- edist(pop, grid)
d <- 2
for (i in 1:3) {
OK <- trps[i,]<d
n <- sum(OK)
segments (rep(pop[i,1],n), grid$x[OK], rep(pop[i,2],n), grid$y[OK])
}
for (i in 1:3) {
OK <- trps[i,]<d
n <- sum(OK)
browser()
segments (rep(pop[i,1],n), grid$x[OK], rep(pop[i,2],n), grid$y[OK])
}
print(n)
grid$x[OK]
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,4,7,15,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
pop <- data.frame(x= c(1.52, 4.50, 0.51), y = c(4.46, 2.5, 1.5))
points(pop)
trps <- edist(pop, grid)
d <- 2
for (i in 1:3) {
OK <- trps[i,]<d
n <- sum(OK)
segments (rep(pop[i,1],n), rep(pop[i,2],n), grid$x[OK], grid$y[OK])
}
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,4,7,15,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
pop <- data.frame(x= c(1.52, 4.50, 0.51), y = c(4.46, 2.5, 1.5))
points(pop)
trps <- edist(pop, grid)
d <- 1.5
for (i in 1:3) {
OK <- trps[i,]<d
n <- sum(OK)
segments (rep(pop[i,1],n), rep(pop[i,2],n), grid$x[OK], grid$y[OK])
}
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,4,7,15,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
pop <- data.frame(x= c(1.52, 4.50, 0.51), y = c(4.46, 2.5, 1.5))
points(pop)
trps <- edist(pop, grid)
d <- 1.5
for (i in 1:3) {
OK <- trps[i,]<d
n <- sum(OK)
segments (rep(pop[i,1],n), rep(pop[i,2],n), grid$x[OK], grid$y[OK])
}
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,4,7,15,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
pop <- data.frame(x= c(1.52, 4.50, 0.51), y = c(4.46, 2.5, 1.5))
points(pop)
trps <- edist(pop, grid)
d <- 1.5
for (i in 1:3) {
OK <- trps[i,]<d
n <- sum(OK)
segments (rep(pop[i,1],n), rep(pop[i,2],n), grid$x[OK], grid$y[OK])
}
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,4,7,15,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
pop <- data.frame(x= c(1.52, 4.50, 0.51), y = c(4.46, 2.5, 1.5))
points(pop)
trps <- edist(pop, grid)
d <- 1.5
for (i in 1:3) {
OK <- trps[i,]<d
n <- sum(OK)
segments (rep(pop[i,1],n), rep(pop[i,2],n), grid$x[OK], grid$y[OK])
}
par(mar=c(1,1,1,1))
plot(grid, border=2, gridlines = FALSE)
plot(as.mask(grid), cov = 'X', breaks=c(0,1,4,7,15,30), cex=4,
pch = 16, col = brewer.pal(n = 5, name = "YlOrBr"),
legend = FALSE, add = TRUE)
plot(as.mask(grid), cex=4, pch = 21, col = 'black', legend = FALSE, add = TRUE)
pop <- data.frame(x= c(1.52, 4.50, 0.51), y = c(4.46, 2.5, 1.5))
points(pop)
trps <- edist(pop, grid)
d <- 1.5
for (i in 1:3) {
OK <- trps[i,]<d
n <- sum(OK)
segments (rep(pop[i,1],n), rep(pop[i,2],n), grid$x[OK], grid$y[OK])
}
source("D:/Density communication/SECRbook/figures/inducedheterogeneity.R", echo=TRUE)
source("D:/Density communication/SECRbook/figures/inducedheterogeneity.R", echo=TRUE)
source("D:/Density communication/SECRbook/figures/inducedheterogeneity.R", echo=TRUE)
source("D:/Density communication/SECRbook/figures/inducedheterogeneity.R", echo=TRUE)
